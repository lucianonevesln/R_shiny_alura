install.packages('data.table')
install.packages('dplyr')
install.packages('ggplot2')
install.packages('plotly')
install.packages('shiny')
install.packages('shinyWidgets')
install.packages('shinydashboard')
dados <- fread('reclamacao.csv', enconding = 'UTF-8')
dados <- fread('reclamacao.csv', encoding = 'UTF-8')
dados <- fread('reclamacao.csv', encoding = "UTF-8")
dados <- fread('reclamacao.csv', encoding = 'UTF-8')
library(data.table)
library(dplyr)
dados <- fread('reclamacao.csv', encoding = 'UTF-8')
View(dados)
View(dados)
# visualizando resumo da tabela
summary(dados)
dados %>%
select(X.1, V1)
dados %>%
select(-X.1, -V1)
View(dados)
dados %>%
select(-X.1, -V1)
dados %>%
select(X.1, V1)
reclamacao <- dados %>%
select(-X.1, -V1)
# retornando valores unicos de uma coluna
unique(reclamacao$regiao)
reclamacao %>%
filter(regiao)
reclamacao %>%
filter(regiao != 'N/D')
reclamacao <- reclamacao %>%
filter(regiao != 'N/D')
unique(reclamacao$regiao)
# retornando valores unicos de uma coluna
unique(reclamacao$Atendida)
unique(reclamacao$Atendida)
reclamacao$Atendida <- gsub(pattern = 'S|Siim',
replacement = 'sim',
x = reclamacao$Atendida)
unique(reclamacao$Atendida)
reclamacao$Atendida <- gsub(pattern = 'N|nAoo|nao',
replacement = 'não' ,
x = reclamacao$Atendida)
unique(reclamacao$Atendida)
reclamacao$Atendida %>%
filter(Atendida != "")
reclamacao <- reclamacao %>%
filter(Atendida != '')
unique(reclamacao$Atendida)
unique(reclamacao$SexoConsumidor)
reclamacao$SexoConsumidor <- gsub(pattern = 'N|NULL' ,
replacement = 'N/I' ,
x = reclamacao$SexoConsumidor)
unique(reclamacao$SexoConsumidor)
fwrite(reclamacao, 'dados_limpos.csv', row.names = F)
View(dados_limpos)
dados_limpos <- fread('dados_limpos.csv', encoding = 'UTF-8')
View(dados_limpos)
library(ggplot2)
library(plotly)
grafico_atendida <- ggplot(reclamacao) +
geom_bar(aes(Atendida), # definindo grafico e eixo x e y
fill = c('red', 'green'), # definindo cores
stat = 'count') + # a propria funcao conta a quantidade de registro
ylab('Quantidade') + # personalizando o rótulo do eixo y
theme_bw() + # alterando o tema para branco
ggtitle('Quantidade de Chamadas Atendidas') # inserindo um titulo para  grafico
grafico_atendida
grafico_atendida <- ggplot(reclamacao) +
geom_bar(aes(Atendida), # definindo grafico e eixo x e y
fill = c('red', 'green'), # definindo cores
stat = 'count') + # a propria funcao conta a quantidade de registro
ylab('Quantidade') + # personalizando o rótulo do eixo y
theme_bw() + # alterando o tema para branco
ggtitle('Quantidade de Chamados Atendidas') # inserindo um titulo para  grafico
grafico_atendida
grafico_atendida
grafico_atendida <- ggplotly(grafico_atendida)
library(data.table)
library(dplyr)
library(ggplot2)
library(plotly)
grafico_atendida <- ggplotly(grafico_atendida)
grafico_atendida
data.frame(table(reclamacao$UF)) %>%
rename(UF = Var1, Qtd = Fre)
data.frame(table(reclamacao$UF)) %>%
rename(UF = Var1, Qtd = Freq)
grafico_atendida <- data.frame(table(reclamacao$UF)) %>% # gerando um data frame a partir de uma tabela, baseada no data frame ja utilizado
rename(UF = Var1, Qtd = Freq) %>% # renomeando colunas geradas na etapa anterior
ggplot(aes(x = reorder(UF, Qtd), y = Qtd)) + # define o mapeamento dos eixos x e y e ordena o grafico
geom_bar(fill = 'blue',  stat = 'identity') + # configura o grafico, definindo a cor e ja que estamos passando o valor da coluna y determina o stat = 'identity'
coord_flip() + # rotaciona as barras de vertical para horizontal
xlab('UF') +
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamcoes Por UF') # define o titulo do grafico
grafico_atendida
reclamacao <- dados %>%
select(-X.1, -V1)
unique(reclamacao$regiao)
reclamacao %>%
filter(regiao != 'N/D')
reclamacao <- reclamacao %>%
filter(regiao != 'N/D')
unique(reclamacao$regiao)
unique(reclamacao$Atendida)
reclamacao$Atendida <- gsub(pattern = 'S|Siim',
replacement = 'sim',
x = reclamacao$Atendida)
reclamacao$Atendida <- gsub(pattern = 'N|nAoo|nao',
replacement = 'não' ,
x = reclamacao$Atendida)
unique(reclamacao$Atendida)
reclamacao <- reclamacao %>%
filter(Atendida != '')
unique(reclamacao$Atendida)
unique(reclamacao$SexoConsumidor)
reclamacao$SexoConsumidor <- gsub(pattern = 'N|NULL' ,
replacement = 'N/I' ,
x = reclamacao$SexoConsumidor)
unique(reclamacao$SexoConsumidor)
# criando uma nova base de dados
fwrite(reclamacao, 'dados_limpos.csv', row.names = F)
grafico_atendida <- ggplot(reclamacao) +
geom_bar(aes(Atendida), # definindo grafico e eixo x e y
fill = c('red', 'green'), # definindo cores
stat = 'count') + # a propria funcao conta a quantidade de registro
ylab('Quantidade') + # personalizando o rótulo do eixo y
theme_bw() + # alterando o tema para branco
ggtitle('Quantidade de Chamados Atendidas') # inserindo um titulo para  grafico
grafico_atendida
grafico_atendida <- ggplotly(grafico_atendida)
grafico_atendida
grafico_uf <- data.frame(table(reclamacao$UF)) %>% # gerando um data frame a partir de uma tabela, baseada no data frame ja utilizado
rename(UF = Var1, Qtd = Freq) %>% # renomeando colunas geradas na etapa anterior
ggplot(aes(x = reorder(UF, Qtd), y = Qtd)) + # define o mapeamento dos eixos x e y e ordena o grafico
geom_bar(fill = 'blue',  stat = 'identity') + # configura o grafico, definindo a cor e ja que estamos passando o valor da coluna y determina o stat = 'identity'
coord_flip() + # rotaciona as barras de vertical para horizontal
xlab('UF') +
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamcoes Por UF')
grafico_uf
grafico_uf <- ggplotly(grafico_uf)
grafico_uf
grafico_uf <- data.frame(table(reclamacao$UF)) %>% # gerando um data frame a partir de uma tabela, baseada no data frame ja utilizado
rename(UF = Var1, Qtd = Freq) %>% # renomeando colunas geradas na etapa anterior
ggplot(aes(x = reorder(UF, Qtd), y = Qtd, text(paste('UF', UF, '<br>', 'QTD:', Qtd)))) + # define o mapeamento dos eixos x e y, ordena o grafico e apresenta texto que aparecera na interacao
geom_bar(fill = 'blue',  stat = 'identity') + # configura o grafico, definindo a cor e ja que estamos passando o valor da coluna y determina o stat = 'identity'
coord_flip() + # rotaciona as barras de vertical para horizontal
xlab('UF') +
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamcoes Por UF') # define o titulo do grafico
grafico_uf
grafico_uf <- ggplotly(grafico_uf)
grafico_uf
grafico_uf <- ggplotly(grafico_uf, tooltip = 'text')
grafico_uf
grafico_uf <- data.frame(table(reclamacao$UF)) %>% # gerando um data frame a partir de uma tabela, baseada no data frame ja utilizado
rename(UF = Var1, Qtd = Freq) %>% # renomeando colunas geradas na etapa anterior
ggplot(aes(x = reorder(UF, Qtd), y = Qtd, text(paste('UF', UF, '<br>', 'QTD:', Qtd)))) + # define o mapeamento dos eixos x e y, ordena o grafico e apresenta texto que aparecera na interacao
geom_bar(fill = 'blue',  stat = 'identity') + # configura o grafico, definindo a cor e ja que estamos passando o valor da coluna y determina o stat = 'identity'
coord_flip() + # rotaciona as barras de vertical para horizontal
xlab('UF') +
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamcoes Por UF') # define o titulo do grafico
grafico_uf <- data.frame(table(reclamacao$UF)) %>% # gerando um data frame a partir de uma tabela, baseada no data frame ja utilizado
rename(UF = Var1, Qtd = Freq) %>% # renomeando colunas geradas na etapa anterior
ggplot(aes(x = reorder(UF, Qtd), y = Qtd, text = paste('UF', UF, '<br>', 'QTD:', Qtd))) + # define o mapeamento dos eixos x e y, ordena o grafico e apresenta texto que aparecera na interacao
geom_bar(fill = 'blue',  stat = 'identity') + # configura o grafico, definindo a cor e ja que estamos passando o valor da coluna y determina o stat = 'identity'
coord_flip() + # rotaciona as barras de vertical para horizontal
xlab('UF') +
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamcoes Por UF') # define o titulo do grafico
grafico_uf
grafico_uf <- ggplotly(grafico_uf, tooltip = 'text')
grafico_uf
grafico_uf <- data.frame(table(reclamacao$UF)) %>% # gerando um data frame a partir de uma tabela, baseada no data frame ja utilizado
rename(UF = Var1, Qtd = Freq) %>% # renomeando colunas geradas na etapa anterior
ggplot(aes(x = reorder(UF, Qtd), y = Qtd, text = paste('UF:', UF, '<br>', 'QTD:', Qtd))) + # define o mapeamento dos eixos x e y, ordena o grafico e apresenta texto que aparecera na interacao
geom_bar(fill = 'blue',  stat = 'identity') + # configura o grafico, definindo a cor e ja que estamos passando o valor da coluna y determina o stat = 'identity'
coord_flip() + # rotaciona as barras de vertical para horizontal
xlab('UF') +
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamcoes Por UF') # define o titulo do grafico
grafico_uf <- ggplotly(grafico_uf, tooltip = 'text') # define a interacao
grafico_uf
data.frame(table(as.Date(reclamacao$DataArquivamento))) %>%
rename(Data = Var1, Qtd = Freq) %>%
ggplot(aes(Data, Qtd)) +
geom_line(group = 1)
data.frame(table(as.Date(reclamacao$DataArquivamento))) %>% # gerando um data frame a partir de uma tabela, convertendo data original em formato mais legivel
rename(Data = Var1, Qtd = Freq) %>% # renomeando as colunas geradas no data frame
ggplot(aes(as.Date(Data), Qtd)) + # definindo eixos x e y
geom_line(group = 1) # definindo modelo do grafico
data.frame(table(as.Date(reclamacao$DataArquivamento))) %>% # gerando um data frame a partir de uma tabela, convertendo data original em formato mais legivel
rename(Data = Var1, Qtd = Freq) %>% # renomeando as colunas geradas no data frame
ggplot(aes(as.Date(Data), Qtd)) + # definindo eixos x e y
geom_line(group = 1) + # definindo modelo do grafico
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes por Ano-mes') + # define o titulo do grafico
theme(axis.text.x = element_text(angle = 45, hjust = )) # define a angulacao do rotulo de datas
scale_x_date(date_labels = '%b-%Y', breaks = '6 month') # escala do eixo x como data, com rotulos das datas e quebra de valores
data.frame(table(as.Date(reclamacao$DataArquivamento))) %>% # gerando um data frame a partir de uma tabela, convertendo data original em formato mais legivel
rename(Data = Var1, Qtd = Freq) %>% # renomeando as colunas geradas no data frame
ggplot(aes(as.Date(Data), Qtd)) + # definindo eixos x e y
geom_line(group = 1) + # definindo modelo do grafico
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes por Ano-mes') + # define o titulo do grafico
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # define a angulacao do rotulo de datas
scale_x_date(date_labels = '%b-%Y', breaks = '6 month') # escala do eixo x como data, com rotulos das datas e quebra de valores
data.frame(table(as.Date(reclamacao$DataArquivamento))) %>% # gerando um data frame a partir de uma tabela, convertendo data original em formato mais legivel
rename(Data = Var1, Qtd = Freq) %>% # renomeando as colunas geradas no data frame
ggplot(aes(as.Date(Data), Qtd)) + # definindo eixos x e y
geom_line(group = 1) + # definindo modelo do grafico
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes por Ano-mes') + # define o titulo do grafico
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +# define a angulacao do rotulo de datas
scale_x_date(date_labels = '%b-%Y', breaks = '6 month') # escala do eixo x como data, com rotulos das datas e quebra de valores
grafico_data <- data.frame(table(as.Date(reclamacao$DataArquivamento))) %>% # gerando um data frame a partir de uma tabela, convertendo data original em formato mais legivel
rename(Data = Var1, Qtd = Freq) %>% # renomeando as colunas geradas no data frame
ggplot(aes(as.Date(Data), Qtd)) + # definindo eixos x e y
geom_line(group = 1) + # definindo modelo do grafico
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes por Ano-mes') + # define o titulo do grafico
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +# define a angulacao do rotulo de datas
scale_x_date(date_labels = '%b-%Y', breaks = '6 month') +# escala do eixo x como data, com rotulos das datas e quebra de valores
xlab('Data') # altera o rotulo do eixo x
grafico_data <- ggplotly(grafico_data)
grafico_data
data.frame(table(reclamacao$anocalendario, reclamacao$Atendida)) %>% # criando um data frame com duas colunas a partir de uma tabela
rename(Ano = Var1, Atendida = Var2, Qtd = Freq)
grafico_atendida_ano <- data.frame(table(reclamacao$anocalendario, reclamacao$Atendida)) %>% # criando um data frame com duas colunas a partir de uma tabela
rename(Ano = Var1, Atendida = Var2, Qtd = Freq) + # renomeando as colunas resultado da etapa anterior
ggplot() + #
geom_bar(aes(x = Ano, # define eixo x
y = Qtd, # define eixo y
fill = Atendida, # define a legenda
stat = 'identity',
position = position_dodge2())) + # configura automaticamente a posicao das colunas
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes Atendidas (nao) Por Ano') # define o titulo do grafico
grafico_atendida_ano <- data.frame(table(reclamacao$anocalendario, reclamacao$Atendida)) %>% # criando um data frame com duas colunas a partir de uma tabela
rename(Ano = Var1, Atendida = Var2, Qtd = Freq)  %>%  # renomeando as colunas resultado da etapa anterior
ggplot() + #
geom_bar(aes(x = Ano, # define eixo x
y = Qtd, # define eixo y
fill = Atendida, # define a legenda
stat = 'identity',
position = position_dodge2())) + # configura automaticamente a posicao das colunas
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes Atendidas (nao) Por Ano') # define o titulo do grafico
grafico_atendida_ano
grafico_atendida_ano <- data.frame(table(reclamacao$anocalendario, reclamacao$Atendida)) %>% # criando um data frame com duas colunas a partir de uma tabela
rename(Ano = Var1, Atendida = Var2, Qtd = Freq)  %>%  # renomeando as colunas resultado da etapa anterior
ggplot() + #
geom_bar(aes(x = Ano, # define eixo x
y = Qtd, # define eixo y
fill = Atendida, # define a legenda
stat = 'identity',
position = position_dodge2())) + # configura automaticamente a posicao das colunas
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes Atendidas (nao) Por Ano') # define o titulo do grafico
grafico_atendida_ano <- data.frame(table(reclamacao$anocalendario, reclamacao$Atendida)) %>% # criando um data frame com duas colunas a partir de uma tabela
rename(Ano = Var1, Atendida = Var2, Qtd = Freq)  %>%  # renomeando as colunas resultado da etapa anterior
ggplot() + #
geom_bar(aes(x = Ano, # define eixo x
y = Qtd, # define eixo y
fill = Atendida), # define a legenda
stat = 'identity',
position = position_dodge2()) + # configura automaticamente a posicao das colunas
theme_bw() + # tema definico como branco
ggtitle('Quantidade de Reclamacoes Atendidas (nao) Por Ano') # define o titulo do grafico
grafico_atendida_ano
grafico_atendida_ano <- ggplotly(grafico_atendida_ano)
grafico_atendida_ano
shiny::runApp()
runApp()
runApp()
shiny::runApp()
